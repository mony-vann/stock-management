// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model Product {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   name        String    @db.VarChar(255)
//   description String?
//   status      String
//   variants    Variant[]
//   amount      Int       @default(0)
//   categoryId  Int
//   category    Category  @relation(fields: [categoryId], references: [id])
// }

// model Variant {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   name          String   @db.VarChar(255)
//   productId     Int
//   subCategoryId Int
//   sizeId        Int
//   price         Float
//   amount        Int
//   product       Product  @relation(fields: [productId], references: [id])
// }

// model Category {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   name      String    @db.VarChar(255)
//   products  Product[]
// }

// model SubCategory {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String   @db.VarChar(255)
// }

// model Size {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String   @db.VarChar(255)
// }

// model User {
//   id       Int     @id @default(autoincrement())
//   email    String  @unique
//   name     String?
//   password String
// }

// model Employee {
//   id           Int          @id @default(autoincrement())
//   name         String
//   password     String
//   contact_info String?
//   role         String
//   sex          String?
//   picture      String?
//   attendance   Attendance[]
//   shifts       Shift[]
//   salaries     Salary[]
// }

// model Attendance {
//   id          Int      @id @default(autoincrement())
//   employee    Employee @relation(fields: [employee_id], references: [id])
//   employee_id Int
//   timestamp   DateTime
//   type        String   @default("check-in") @db.VarChar(10)
// }

// model Shift {
//   id         Int        @id @default(autoincrement())
//   name       String     @unique
//   employee   Employee[]
//   start_time DateTime
//   end_time   DateTime
// }

// model Salary {
//   id             Int      @id @default(autoincrement())
//   employee       Employee @relation(fields: [employee_id], references: [id])
//   employee_id    Int
//   period_start   DateTime
//   period_end     DateTime
//   regular_hours  Int
//   overtime_hours Int
//   total_salary   Decimal  @db.Decimal(10, 2)
// }

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  name     String?
  password String
}

model Employee {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  password     String
  contact_info String?
  role         String
  sex          String?
  picture      String?
  attendance   Attendance[]
  shift        String       @db.ObjectId
  payroll      Payroll[]
  salary       Float
}

model Attendance {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employee    Employee @relation(fields: [employee_id], references: [id])
  employee_id String   @db.ObjectId
  timestamp   DateTime
  type        String   @default("check-in")
}

model Shift {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  start_time DateTime
  end_time   DateTime
}

type Log {
  date   DateTime
  status String
}

model Payroll {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  employee       Employee @relation(fields: [employee_id], references: [id])
  employee_id    String   @db.ObjectId
  present_days   Int
  absent_days    Int
  permitted_days Int
  logs           Log[]
  amount         Float
  timestamp      DateTime
  type           String   @default("salary")
}

model Sale {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNo  String
  startDate  DateTime
  stopDate   DateTime
  cashier    String
  tableNo    String
  subTotal   Float
  vat        Float
  discount   Float
  grandTotal Float
  free       Float
  balance    Float
  recDollar  Float
  riel       Float
  creditCard Float
  revenue    Float
  createdAt  DateTime @default(now())
}

model SaleSummary {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  data              DateTime
  totalSales        Float
  totalAmount       Int
  totalSubTotal     Float
  totalVAT          Float
  totalDiscounts    Float
  totalRevenue      Float
  averageSaleAmount Float
  largestSale       Float
  smallestSale      Float
}
